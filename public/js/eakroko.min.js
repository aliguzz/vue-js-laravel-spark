
$(document).ready(function () {
    // masked input
    if ($('.mask_date').length > 0) {
        $(".mask_date").mask("9999/99/99");
    }
    if ($('.mask_phone').length > 0) {
        $(".mask_phone").mask("(999) 999-9999");
    }
    if ($('.mask_serialNumber').length > 0) {
        $(".mask_serialNumber").mask("9999-9999-99");
    }
    if ($('.mask_productNumber').length > 0) {
        $(".mask_productNumber").mask("aaa-9999-a");
    }
    // tag-input
    if ($(".tagsinput").length > 0) {
        $('.tagsinput').each(function (e) {
            $(this).tagsInput({
                width: 'auto',
                height: 'auto'
            });
        });
    }
    // datepicker
    if ($('.datepick').length > 0) {
        $('.datepick').each(function () {
            var $el = $(this);
            $el.datepicker();
            $el.on('changeDate', function () {
                $el.datepicker('hide');
            });
        });
    }
    // daterangepicker
    if ($('.daterangepick').length > 0) {
        $('.daterangepick').daterangepicker();
    }

    // timepicker
    if ($('.timepick').length > 0) {
        $('.timepick').timepicker({
            defaultTime: 'current',
            minuteStep: 1,
            disableFocus: true,
            template: 'dropdown'
        });
    }
    // colorpicker
    if ($('.colorpick').length > 0) {
        $('.colorpick').colorpicker();
    }

    // Chosen (chosen)
    if ($('.chosen-select').length > 0) {
        $('.chosen-select').each(function () {
            var $el = $(this);
            var search = ($el.attr("data-nosearch") === "true") ? true : false,
                    opt = {};
            if (search)
                opt.disable_search_threshold = 9999999;
            $el.chosen(opt);
        });
    }

    if ($(".select2-me").length > 0) {
        $(".select2-me").select2();
    }

    // multi-select
    if ($('.multiselect').length > 0) {
        $(".multiselect").each(function () {
            var $el = $(this);
            var selectableHeader = $el.attr('data-selectableheader'),
                    selectionHeader = $el.attr('data-selectionheader');
            if (selectableHeader != undefined) {
                selectableHeader = "<div class='multi-custom-header'>" + selectableHeader + "</div>";
            }
            if (selectionHeader != undefined) {
                selectionHeader = "<div class='multi-custom-header'>" + selectionHeader + "</div>";
            }
            $el.multiSelect({
                selectionHeader: selectionHeader,
                selectableHeader: selectableHeader
            });
        });
    }

    // spinner
    if ($('.spinner').length > 0) {
        $('.spinner').spinner();
    }

    if ($(".colorbox-image").length > 0) {
        $(".colorbox-image").colorbox({
            maxWidth: "90%",
            maxHeight: "90%",
            rel: $(this).attr("rel")
        });
    }
    // Validation
    if ($('.form-validate').length > 0) {
        $('.form-validate').each(function () {
            var id = $(this).attr('id');
            $("#" + id).validate({
                errorElement: 'span',
                errorClass: 'help-block has-error',
                errorPlacement: function (error, element) {
                    if (element.parents("label").length > 0) {
                        element.parents("label").after(error);
                    } else if (element.parents(".error-container-custom").length > 0) {
                        element.parents(".error-container-custom").append(error);
                    } else {
                        element.after(error);
                    }
                },
                highlight: function (label) {
                    $(label).closest('.form-group').removeClass('has-error has-success').addClass('has-error');
                },
                success: function (label) {
                    label.addClass('valid').closest('.form-group').removeClass('has-error has-success').addClass('has-success');
                },
                onkeyup: function (element) {
                    $(element).valid();
                },
                onfocusout: function (element) {
                    $(element).valid();
                }
            });
        });
    }

    // new dataTables
    if ($('.dataTable').length > 0) {
        $('.dataTable').each(function () {
            var $el = $(this),
                    dataTable_options = {
                        dom: 'lfrtip'
                    },
                    no_sort = $el.attr('data-nosort');
            // Skip for custom dataTable
            if ($el.hasClass('dataTable-custom'))
                return;

            if ($el.hasClass('dataTable-column_filter')) {
                var types = $el.attr('data-column_filter_types'),
                        position = $el.attr('data-column_filter_position'),
                        dateformat = $el.attr('data-column_filter_dateformat');

                if (position !== 'bottom') {
                    position = 'top'
                }

                if (types !== undefined) {
                    types = types.split(',');
                } else {
                    types = [];
                }

                if (dateformat === undefined) {
                    dateformat = 'mm/dd/yy';
                }

                dataTable_options.initComplete = function () {
                    var api = this.api(),
                            $filter_row = $('<tr class="dataTable-col_filter"></tr>'),
                            $table = $(this);

                    // Add the filter to head or foot
                    if (position == 'top') {
                        $filter_row.appendTo($table.find('thead'));
                    } else {
                        if ($table.find('tfoot').length == 0) {
                            $('<tfoot></tfoot>').appendTo($table);
                        }

                        $filter_row.appendTo($table.find('tfoot'));
                    }

                    api.columns().indexes().flatten().each(function (i) {
                        var column = api.column(i),
                                $filter_col = $('<th></th>').appendTo($filter_row);

                        if (types[i] === 'select') {
                            var select = $('<select><option value=""></option></select>')
                                    .appendTo($filter_col)
                                    .on('change', function () {
                                        var val = $(this).val();

                                        column
                                                .search(val ? '^' + val + '$' : '', true, false)
                                                .draw();
                                    });

                            column.data().unique().sort().each(function (d, j) {
                                select.append('<option value="' + d + '">' + d + '</option>')
                            });
                        } else if (types[i] == 'daterange') {
                            var $from_date = $('<input type="text" class="dataTable-datepicker-from" name="dataTable-daterpicker-from" placeholder="From...">').appendTo($filter_col),
                                    $to_date = $('<input type="text" class="dataTable-datepicker-to" name="dataTable-daterpicker-to" placeholder="To...">').appendTo($filter_col),
                                    datepicker_options = {
                                        dateFormat: dateformat
                                    };

                            $from_date.datepicker(datepicker_options);
                            $to_date.datepicker(datepicker_options);

                            $.fn.dataTable.ext.search.push(
                                    function (settings, data, dataIndex) {
                                        var column_date = data[i],
                                                from_date = $from_date.val(),
                                                to_date = $to_date.val(),
                                                moment_dateformat = dateformat.toUpperCase(),
                                                column_moment_date = moment(column_date, moment_dateformat),
                                                from_moment_date = moment(from_date, moment_dateformat),
                                                to_moment_date = moment(to_date, moment_dateformat);

                                        if (column_moment_date === false || from_moment_date === false || to_moment_date === false) {
                                            // we had invalid date
                                            return true;
                                        }

                                        if (from_date == '' && to_date == '') {
                                            return true;
                                        } else {
                                            if (from_date == '' && to_date != '') {
                                                if (!column_moment_date.isBefore(to_moment_date)) {
                                                    return false;
                                                }
                                            } else if (from_date != '' && to_date == '') {
                                                if (!column_moment_date.isAfter(from_moment_date)) {
                                                    return false;
                                                }
                                            } else {
                                                var range = moment().range(from_moment_date, to_moment_date);
                                                if (!range.contains(column_moment_date)) {
                                                    return false;
                                                }
                                            }
                                        }

                                        return true;
                                    }
                            );

                            $from_date.change(function () {
                                api.draw();
                            });

                            $to_date.change(function () {
                                api.draw();
                            });
                        } else if (types[i] !== 'null' || types[i] == 'text') {
                            var title = '',
                                    input = $('<input type="text" placeholder="Search ' + title + '" />')
                                    .appendTo($filter_col)
                                    .on('keyup change', function () {
                                        var val = $(this).val();

                                        column
                                                .search(val)
                                                .draw();
                                    });
                        }
                    });
                };
            }

            if (no_sort !== undefined) {
                var cols = no_sort.split(',').map(function (col_string) {
                    return parseInt(col_string.trim());
                });

                dataTable_options.columnDefs = [
                    {
                        'orderable': false,
                        'targets': cols
                    }
                ];
                dataTable_options.order = [];
            }

            if ($el.attr("data-nosearch") !== undefined) {
                dataTable_options.filter = false;
            }
            if ($el.attr("data-nopagination") !== undefined) {
                dataTable_options.paging = false;
            }
            if ($el.attr("data-noinfo") !== undefined) {
                dataTable_options.info = false;
            }
            if ($el.attr("data-noorder") !== undefined) {
                dataTable_options.ordering = false;
            }

            if ($el.hasClass('dataTable-tools')) {
                dataTable_options.dom = 'T' + dataTable_options.dom;
                dataTable_options.tableTools = {
                    "sSwfPath": "js/plugins/datatables/extensions/copy_csv_xls_pdf.swf"
                };
            }

            if ($el.hasClass('dataTable-colreorder')) {
                dataTable_options.dom = 'R' + dataTable_options.dom;
            }

            if ($el.hasClass('dataTable-colvis')) {
                dataTable_options.dom = 'C' + dataTable_options.dom;
                dataTable_options.colVis = {
                    "buttonText": "Show/hide columns <i class='fa fa-angle-down'></i>",
                    "iOverlayFade": 0
                };
            }

            if ($el.hasClass("dataTable-scroll-x")) {
                dataTable_options.scrollX = "100%";
                dataTable_options.scrollCollapse = true;
            }

            if ($el.hasClass("dataTable-scroll-y")) {
                dataTable_options.scrollY = "300px";
                dataTable_options.paginate = false;
                dataTable_options.scrollCollapse = true;
            }

            if ($el.hasClass("dataTable-scroller")) {
                var ajaxSource = $el.attr('data-ajax-source');

                if (ajaxSource !== '' && ajaxSource !== undefined) {
                    if ($el.hasClass('dataTable-tools')) {
                        dataTable_options.dom = 'Tfrtip';
                    }

                    dataTable_options.scrollY = "300px";
                    dataTable_options.deferRender = true;
                    dataTable_options.dom = dataTable_options.dom + 'S';
                    dataTable_options.ajax = ajaxSource;
                }
            }

            var table = $el.DataTable(dataTable_options);

            if ($el.hasClass("dataTable-fixedcolumn")) {
                new $.fn.dataTable.FixedColumns(table);
            }

            $el.find('.dataTable-checkall').change(function () {
                var $checkbox = $(this),
                        col_index = $checkbox.parent().index(),
                        nodes;

                if ($el.attr('data-checkall') !== 'all') {
                    nodes = table.column(col_index, {page: 'current'}).nodes().to$();
                } else {
                    nodes = table.column(col_index, {page: 'all'}).nodes().to$();
                }
                nodes.find('input[type="checkbox"]').prop('checked', $checkbox.prop('checked'));
            });
        });
    }
    // slider
    if ($('.slider').length > 0) {
        $(".slider").each(function () {
            var $el = $(this);
            var min = parseInt($el.attr('data-min')),
                    max = parseInt($el.attr('data-max')),
                    step = parseInt($el.attr('data-step')),
                    range = $el.attr('data-range'),
                    rangestart = parseInt($el.attr('data-rangestart')),
                    rangestop = parseInt($el.attr('data-rangestop'));

            var opt = {
                min: min,
                max: max,
                step: step,
                slide: function (event, ui) {
                    $el.find('.amount').html(ui.value);
                }
            };

            if (range !== undefined) {
                opt.range = true;
                opt.values = [rangestart, rangestop];
                opt.slide = function (event, ui) {
                    $el.find('.amount').html(ui.values[0] + " - " + ui.values[1]);
                    $el.find(".amount_min").html(ui.values[0] + "$");
                    $el.find(".amount_max").html(ui.values[1] + "$");
                };
            }

            $el.slider(opt);
            if (range !== undefined) {
                var val = $el.slider('values');
                $el.find('.amount').html(val[0] + ' - ' + val[1]);
                $el.find(".amount_min").html(val[0] + "$");
                $el.find(".amount_max").html(val[1] + "$");
            } else {
                $el.find('.amount').html($el.slider('value'));
            }
        });
    }
});
$(function () {
    $('.delete-form-btn').click(function () {
        var submitBtn = $(this).next('.deleteSubmit');
        swal({
            title: "Are you sure?",
            text: "You will not be able to recover this record!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "No, cancel!",
            closeOnConfirm: false,
            closeOnCancel: true
        },
                function (isConfirm) {
                    if (isConfirm) {
                        submitBtn.click();
                    }
                });
    });
    $("#purchase_ssl").click(function(){
        var link = $(this).attr('href');
        swal({
            title: "Are you sure?",
            text: "You want to purchase SSL for the domain it will automatically detect money from your card!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, Go!",
            cancelButtonText: "No, cancel!",
            closeOnConfirm: false,
            closeOnCancel: true
        },
                function (isConfirm) {
                    if (isConfirm) {
                        window.location.href=link;
                    }
                });
        return false;
    });
});
$(document).on("click",".copytoclipboard",function(){
    var element = $(this);
    var $temp = $("<input>");
    $("body").append($temp);
    $temp.val(element.attr("href")).select();
    document.execCommand("copy");
    $temp.remove();
    swal({
            title: "Copied to clipboard!",
            type: "success"
        });
    return false;
});